/**
 * 
 */
package leetCode;

/**
 * 给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。

水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。
反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。
示例 1:

输入: [[1,1,0],[1,0,1],[0,0,0]]
输出: [[1,0,0],[0,1,0],[1,1,1]]
解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；
     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]
示例 2:

输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；
     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
说明:

1 <= A.length = A[0].length <= 20
0 <= A[i][j] <= 1
 *
 * O(N * M /2
 */
public class FlippingImage {

	public static int[][] flipImage(int[][]a) {
//		int [][]temp = new int [a.length][];
		int colLength = a[0].length;
		for(int i=0;i<a.length;i++){
			int j=0,k=colLength-1;
			while(j < k){
				int val = a[i][j];
				a[i][j] = Math.abs((a[i][k]) - 1); //整形不能用 ！取反，使用绝对值方式把1->0,0->1
				a[i][k] = Math.abs((val - 1));
				j++;k--;
			}
			if(j==k){//每行总数为奇数时，对中间的数取反。
				a[i][j] = Math.abs( a[i][j] - 1);
			}
		}
		return a;
			
		
	}
	public static void main(String[] args) {
//	  int a[][] = {{1,1,0,0},{1,0,0,1},{0,1,1,1},{1,0,1,0}};
//			  输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
		int a[][] = {{1,1,0},{1,0,1},{0,0,0}};
//				输出: [[1,0,0],[0,1,0],[1,1,1]]
	  int b[][] = flipImage(a);
	  for(int i=0;i<b.length;i++){
		  for(int j=0;j<b[0].length;j++){
			  System.out.print(b[i][j] + " ");
		  }
		  System.out.println();
	  }
	  
	}

}
